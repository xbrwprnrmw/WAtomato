/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VoiceflowBot } from "./VoiceflowBot";
import { VoiceflowBotCountArgs } from "./VoiceflowBotCountArgs";
import { VoiceflowBotFindManyArgs } from "./VoiceflowBotFindManyArgs";
import { VoiceflowBotFindUniqueArgs } from "./VoiceflowBotFindUniqueArgs";
import { CreateVoiceflowBotArgs } from "./CreateVoiceflowBotArgs";
import { UpdateVoiceflowBotArgs } from "./UpdateVoiceflowBotArgs";
import { DeleteVoiceflowBotArgs } from "./DeleteVoiceflowBotArgs";
import { VoiceflowBotService } from "../voiceflowBot.service";
@graphql.Resolver(() => VoiceflowBot)
export class VoiceflowBotResolverBase {
  constructor(protected readonly service: VoiceflowBotService) {}

  async _voiceflowBotsMeta(
    @graphql.Args() args: VoiceflowBotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VoiceflowBot])
  async voiceflowBots(
    @graphql.Args() args: VoiceflowBotFindManyArgs
  ): Promise<VoiceflowBot[]> {
    return this.service.voiceflowBots(args);
  }

  @graphql.Query(() => VoiceflowBot, { nullable: true })
  async voiceflowBot(
    @graphql.Args() args: VoiceflowBotFindUniqueArgs
  ): Promise<VoiceflowBot | null> {
    const result = await this.service.voiceflowBot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VoiceflowBot)
  async createVoiceflowBot(
    @graphql.Args() args: CreateVoiceflowBotArgs
  ): Promise<VoiceflowBot> {
    return await this.service.createVoiceflowBot({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VoiceflowBot)
  async updateVoiceflowBot(
    @graphql.Args() args: UpdateVoiceflowBotArgs
  ): Promise<VoiceflowBot | null> {
    try {
      return await this.service.updateVoiceflowBot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoiceflowBot)
  async deleteVoiceflowBot(
    @graphql.Args() args: DeleteVoiceflowBotArgs
  ): Promise<VoiceflowBot | null> {
    try {
      return await this.service.deleteVoiceflowBot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
