/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VoiceflowBotService } from "../voiceflowBot.service";
import { VoiceflowBotCreateInput } from "./VoiceflowBotCreateInput";
import { VoiceflowBot } from "./VoiceflowBot";
import { VoiceflowBotFindManyArgs } from "./VoiceflowBotFindManyArgs";
import { VoiceflowBotWhereUniqueInput } from "./VoiceflowBotWhereUniqueInput";
import { VoiceflowBotUpdateInput } from "./VoiceflowBotUpdateInput";

export class VoiceflowBotControllerBase {
  constructor(protected readonly service: VoiceflowBotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoiceflowBot })
  async createVoiceflowBot(
    @common.Body() data: VoiceflowBotCreateInput
  ): Promise<VoiceflowBot> {
    return await this.service.createVoiceflowBot({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VoiceflowBot] })
  @ApiNestedQuery(VoiceflowBotFindManyArgs)
  async voiceflowBots(@common.Req() request: Request): Promise<VoiceflowBot[]> {
    const args = plainToClass(VoiceflowBotFindManyArgs, request.query);
    return this.service.voiceflowBots({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoiceflowBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async voiceflowBot(
    @common.Param() params: VoiceflowBotWhereUniqueInput
  ): Promise<VoiceflowBot | null> {
    const result = await this.service.voiceflowBot({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoiceflowBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVoiceflowBot(
    @common.Param() params: VoiceflowBotWhereUniqueInput,
    @common.Body() data: VoiceflowBotUpdateInput
  ): Promise<VoiceflowBot | null> {
    try {
      return await this.service.updateVoiceflowBot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoiceflowBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVoiceflowBot(
    @common.Param() params: VoiceflowBotWhereUniqueInput
  ): Promise<VoiceflowBot | null> {
    try {
      return await this.service.deleteVoiceflowBot({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
