/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { KnowledgeBase } from "./KnowledgeBase";
import { KnowledgeBaseCountArgs } from "./KnowledgeBaseCountArgs";
import { KnowledgeBaseFindManyArgs } from "./KnowledgeBaseFindManyArgs";
import { KnowledgeBaseFindUniqueArgs } from "./KnowledgeBaseFindUniqueArgs";
import { CreateKnowledgeBaseArgs } from "./CreateKnowledgeBaseArgs";
import { UpdateKnowledgeBaseArgs } from "./UpdateKnowledgeBaseArgs";
import { DeleteKnowledgeBaseArgs } from "./DeleteKnowledgeBaseArgs";
import { ConnectionFindManyArgs } from "../../connection/base/ConnectionFindManyArgs";
import { Connection } from "../../connection/base/Connection";
import { KnowledgeBaseService } from "../knowledgeBase.service";
@graphql.Resolver(() => KnowledgeBase)
export class KnowledgeBaseResolverBase {
  constructor(protected readonly service: KnowledgeBaseService) {}

  async _knowledgeBasesMeta(
    @graphql.Args() args: KnowledgeBaseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [KnowledgeBase])
  async knowledgeBases(
    @graphql.Args() args: KnowledgeBaseFindManyArgs
  ): Promise<KnowledgeBase[]> {
    return this.service.knowledgeBases(args);
  }

  @graphql.Query(() => KnowledgeBase, { nullable: true })
  async knowledgeBase(
    @graphql.Args() args: KnowledgeBaseFindUniqueArgs
  ): Promise<KnowledgeBase | null> {
    const result = await this.service.knowledgeBase(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => KnowledgeBase)
  async createKnowledgeBase(
    @graphql.Args() args: CreateKnowledgeBaseArgs
  ): Promise<KnowledgeBase> {
    return await this.service.createKnowledgeBase({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => KnowledgeBase)
  async updateKnowledgeBase(
    @graphql.Args() args: UpdateKnowledgeBaseArgs
  ): Promise<KnowledgeBase | null> {
    try {
      return await this.service.updateKnowledgeBase({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KnowledgeBase)
  async deleteKnowledgeBase(
    @graphql.Args() args: DeleteKnowledgeBaseArgs
  ): Promise<KnowledgeBase | null> {
    try {
      return await this.service.deleteKnowledgeBase(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Connection], { name: "connections" })
  async findConnections(
    @graphql.Parent() parent: KnowledgeBase,
    @graphql.Args() args: ConnectionFindManyArgs
  ): Promise<Connection[]> {
    const results = await this.service.findConnections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
