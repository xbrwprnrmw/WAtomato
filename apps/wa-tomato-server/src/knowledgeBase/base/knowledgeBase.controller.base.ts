/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KnowledgeBaseService } from "../knowledgeBase.service";
import { KnowledgeBaseCreateInput } from "./KnowledgeBaseCreateInput";
import { KnowledgeBase } from "./KnowledgeBase";
import { KnowledgeBaseFindManyArgs } from "./KnowledgeBaseFindManyArgs";
import { KnowledgeBaseWhereUniqueInput } from "./KnowledgeBaseWhereUniqueInput";
import { KnowledgeBaseUpdateInput } from "./KnowledgeBaseUpdateInput";
import { ConnectionFindManyArgs } from "../../connection/base/ConnectionFindManyArgs";
import { Connection } from "../../connection/base/Connection";
import { ConnectionWhereUniqueInput } from "../../connection/base/ConnectionWhereUniqueInput";

export class KnowledgeBaseControllerBase {
  constructor(protected readonly service: KnowledgeBaseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: KnowledgeBase })
  async createKnowledgeBase(
    @common.Body() data: KnowledgeBaseCreateInput
  ): Promise<KnowledgeBase> {
    return await this.service.createKnowledgeBase({
      data: data,
      select: {
        content: true,
        createdAt: true,
        createdDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [KnowledgeBase] })
  @ApiNestedQuery(KnowledgeBaseFindManyArgs)
  async knowledgeBases(
    @common.Req() request: Request
  ): Promise<KnowledgeBase[]> {
    const args = plainToClass(KnowledgeBaseFindManyArgs, request.query);
    return this.service.knowledgeBases({
      ...args,
      select: {
        content: true,
        createdAt: true,
        createdDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: KnowledgeBase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async knowledgeBase(
    @common.Param() params: KnowledgeBaseWhereUniqueInput
  ): Promise<KnowledgeBase | null> {
    const result = await this.service.knowledgeBase({
      where: params,
      select: {
        content: true,
        createdAt: true,
        createdDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: KnowledgeBase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKnowledgeBase(
    @common.Param() params: KnowledgeBaseWhereUniqueInput,
    @common.Body() data: KnowledgeBaseUpdateInput
  ): Promise<KnowledgeBase | null> {
    try {
      return await this.service.updateKnowledgeBase({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          createdDate: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: KnowledgeBase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKnowledgeBase(
    @common.Param() params: KnowledgeBaseWhereUniqueInput
  ): Promise<KnowledgeBase | null> {
    try {
      return await this.service.deleteKnowledgeBase({
        where: params,
        select: {
          content: true,
          createdAt: true,
          createdDate: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/connections")
  @ApiNestedQuery(ConnectionFindManyArgs)
  async findConnections(
    @common.Req() request: Request,
    @common.Param() params: KnowledgeBaseWhereUniqueInput
  ): Promise<Connection[]> {
    const query = plainToClass(ConnectionFindManyArgs, request.query);
    const results = await this.service.findConnections(params.id, {
      ...query,
      select: {
        bot: true,
        createdAt: true,
        id: true,

        knowledgeBase: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/connections")
  async connectConnections(
    @common.Param() params: KnowledgeBaseWhereUniqueInput,
    @common.Body() body: ConnectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      connections: {
        connect: body,
      },
    };
    await this.service.updateKnowledgeBase({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/connections")
  async updateConnections(
    @common.Param() params: KnowledgeBaseWhereUniqueInput,
    @common.Body() body: ConnectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      connections: {
        set: body,
      },
    };
    await this.service.updateKnowledgeBase({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/connections")
  async disconnectConnections(
    @common.Param() params: KnowledgeBaseWhereUniqueInput,
    @common.Body() body: ConnectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      connections: {
        disconnect: body,
      },
    };
    await this.service.updateKnowledgeBase({
      where: params,
      data,
      select: { id: true },
    });
  }
}
