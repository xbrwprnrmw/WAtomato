/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  KnowledgeBase as PrismaKnowledgeBase,
  Connection as PrismaConnection,
} from "@prisma/client";

export class KnowledgeBaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KnowledgeBaseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.knowledgeBase.count(args);
  }

  async knowledgeBases<T extends Prisma.KnowledgeBaseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.KnowledgeBaseFindManyArgs>
  ): Promise<PrismaKnowledgeBase[]> {
    return this.prisma.knowledgeBase.findMany<Prisma.KnowledgeBaseFindManyArgs>(
      args
    );
  }
  async knowledgeBase<T extends Prisma.KnowledgeBaseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.KnowledgeBaseFindUniqueArgs>
  ): Promise<PrismaKnowledgeBase | null> {
    return this.prisma.knowledgeBase.findUnique(args);
  }
  async createKnowledgeBase<T extends Prisma.KnowledgeBaseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.KnowledgeBaseCreateArgs>
  ): Promise<PrismaKnowledgeBase> {
    return this.prisma.knowledgeBase.create<T>(args);
  }
  async updateKnowledgeBase<T extends Prisma.KnowledgeBaseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.KnowledgeBaseUpdateArgs>
  ): Promise<PrismaKnowledgeBase> {
    return this.prisma.knowledgeBase.update<T>(args);
  }
  async deleteKnowledgeBase<T extends Prisma.KnowledgeBaseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.KnowledgeBaseDeleteArgs>
  ): Promise<PrismaKnowledgeBase> {
    return this.prisma.knowledgeBase.delete(args);
  }

  async findConnections(
    parentId: string,
    args: Prisma.ConnectionFindManyArgs
  ): Promise<PrismaConnection[]> {
    return this.prisma.knowledgeBase
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .connections(args);
  }
}
