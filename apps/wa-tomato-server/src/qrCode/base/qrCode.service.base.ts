/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, QrCode as PrismaQrCode } from "@prisma/client";

export class QrCodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QrCodeCountArgs, "select">): Promise<number> {
    return this.prisma.qrCode.count(args);
  }

  async qrCodes<T extends Prisma.QrCodeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QrCodeFindManyArgs>
  ): Promise<PrismaQrCode[]> {
    return this.prisma.qrCode.findMany<Prisma.QrCodeFindManyArgs>(args);
  }
  async qrCode<T extends Prisma.QrCodeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QrCodeFindUniqueArgs>
  ): Promise<PrismaQrCode | null> {
    return this.prisma.qrCode.findUnique(args);
  }
  async createQrCode<T extends Prisma.QrCodeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QrCodeCreateArgs>
  ): Promise<PrismaQrCode> {
    return this.prisma.qrCode.create<T>(args);
  }
  async updateQrCode<T extends Prisma.QrCodeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QrCodeUpdateArgs>
  ): Promise<PrismaQrCode> {
    return this.prisma.qrCode.update<T>(args);
  }
  async deleteQrCode<T extends Prisma.QrCodeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QrCodeDeleteArgs>
  ): Promise<PrismaQrCode> {
    return this.prisma.qrCode.delete(args);
  }
}
